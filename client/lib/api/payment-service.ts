// src/services/order-service.ts
import { orderApi } from './api-client'

/* ------------------------------------------------------------------ */
/* Enumerations                                                        */
/* ------------------------------------------------------------------ */

export type OrderStatus =
  | 'pending'
  | 'processing'
  | 'shipped'
  | 'out_for_delivery'
  | 'delivered'          // “cancelled” is only used inside tracking entries

export type PaymentStatus =
  | 'succeeded'          // controller sets this literal value
  | 'pending'
  | 'failed'
  | 'refunded'

/* ------------------------------------------------------------------ */
/* Schemas                                                             */
/* ------------------------------------------------------------------ */

export interface ShippingAddress {
  line1: string
  city: string
  postalCode: string
  country: string
}

export interface OrderItem {
  productId: string
  quantity: number
  price: number
  _links?: { product: string }
}

export interface Order {
  _id: string
  /** Parent order (same as `orderId` in create payload) */
  parentOrderId: string
  consumerId: string
  vendorId?: string
  paymentId: string
  paymentStatus: PaymentStatus
  orderItems: OrderItem[]
  subtotalAmount: number
  orderStatus: OrderStatus
  shippingAddress: ShippingAddress
  createdAt: string
  updatedAt: string
  _links?: {
    self: string
    payment: string
    tracking: string
  }
}

export interface PaginatedOrders {
  page: number
  limit: number
  total: number
  orders: Order[]
}

/* ------------------------------------------------------------------ */
/* DTOs sent TO the API                                                */
/* ------------------------------------------------------------------ */

export interface CreateOrderDto {
  consumerId: string
  paymentId: string
  /** Parent order ID generated by the payment service */
  orderId: string
  shippingAddress: ShippingAddress
}

export interface UpdateOrderStatusDto {
  orderStatus: OrderStatus
}

export interface CancelOrderDto {
  reason?: string
}

/* ------------------------------------------------------------------ */
/* Service class                                                       */
/* ------------------------------------------------------------------ */

class OrderService {
  /* 1. CREATE ------------------------------------------------------ */
  async createOrder(payload: CreateOrderDto) {
    return orderApi.post<{
      message: string
      parentOrderId: string
      childOrderIds: string[]
    }>('/', payload)
  }

  /* 2. LISTING ----------------------------------------------------- */
  async listOrders(params?: {
    page?: number
    limit?: number
    orderStatus?: OrderStatus
    dateFrom?: string
    dateTo?: string
  }) {
    return orderApi.get<PaginatedOrders>('/', { params })
  }

  async listUserOrders(
    userId: string,
    params?: { page?: number; limit?: number },
  ) {
    return orderApi.get<PaginatedOrders>(`/user/${userId}`, { params })
  }

  /* 3. LOOK‑UPS ---------------------------------------------------- */
  async getByParentId(parentOrderId: string) {
    return orderApi.get<{
      parentOrderId: string
      childOrders: Order[]
    }>(`/parent/${parentOrderId}`)
  }

  async get(id: string) {
    return orderApi.get<
      | { parentOrderId: string; childOrders: Order[] }
      | Order
    >(`/${id}`)
  }

  /* 4. LIFE‑CYCLE ACTIONS ----------------------------------------- */
  async updateStatus(id: string, data: UpdateOrderStatusDto) {
    return orderApi.put<{ message: string; newStatus: OrderStatus }>(
      `/${id}/status`,
      data,
    )
  }

  async cancel(id: string, data?: CancelOrderDto) {
    return orderApi.post<{ message: string }>(`/${id}/cancel`, data)
  }

  /* 5. TRACKING ---------------------------------------------------- */
  async getTracking(id: string) {
    return orderApi.get<{
      orderId: string
      tracking: Array<{
        status: OrderStatus | 'cancelled'
        timestamp: string
        note?: string
        carrier?: string
        trackingNumber?: string
      }>
    }>(`/${id}/tracking`)
  }

  /* 6. HEALTH ------------------------------------------------------ */
  async health() {
    return orderApi.get<{ service: string; status: string }>('health')
  }
}

export const orderService = new OrderService()
